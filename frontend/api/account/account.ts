/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Velmo
 * Backend API for Velmo
 * OpenAPI spec version: 1.0
 */
import useSwr from 'swr'
import type { Arguments, Key, SWRConfiguration } from 'swr'

import useSWRMutation from 'swr/mutation'
import type { SWRMutationConfiguration } from 'swr/mutation'

import type { CreateAccountRequest, Model } from '.././model'

import { customAxios } from '.././axiosInstance'

export const accountsAll = () => {
    return customAxios<Model[]>({ url: `/accounts`, method: 'GET' })
}

export const getAccountsAllKey = () => [`/accounts`] as const

export type AccountsAllQueryResult = NonNullable<
    Awaited<ReturnType<typeof accountsAll>>
>
export type AccountsAllQueryError = string

export const useAccountsAll = <TError = string>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof accountsAll>>, TError> & {
        swrKey?: Key
        enabled?: boolean
    }
}) => {
    const { swr: swrOptions } = options ?? {}

    const isEnabled = swrOptions?.enabled !== false
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getAccountsAllKey() : null))
    const swrFn = () => accountsAll()

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    )

    return {
        swrKey,
        ...query,
    }
}
export const accountCreate = (createAccountRequest: CreateAccountRequest) => {
    return customAxios<Model>({
        url: `/accounts/create`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createAccountRequest,
    })
}

export const getAccountCreateMutationFetcher = () => {
    return (_: Key, { arg }: { arg: CreateAccountRequest }): Promise<Model> => {
        return accountCreate(arg)
    }
}
export const getAccountCreateMutationKey = () => [`/accounts/create`] as const

export type AccountCreateMutationResult = NonNullable<
    Awaited<ReturnType<typeof accountCreate>>
>
export type AccountCreateMutationError = string

export const useAccountCreate = <TError = string>(options?: {
    swr?: SWRMutationConfiguration<
        Awaited<ReturnType<typeof accountCreate>>,
        TError,
        Key,
        CreateAccountRequest,
        Awaited<ReturnType<typeof accountCreate>>
    > & { swrKey?: string }
}) => {
    const { swr: swrOptions } = options ?? {}

    const swrKey = swrOptions?.swrKey ?? getAccountCreateMutationKey()
    const swrFn = getAccountCreateMutationFetcher()

    const query = useSWRMutation(swrKey, swrFn, swrOptions)

    return {
        swrKey,
        ...query,
    }
}
export const accountDelete = (accountId: string) => {
    return customAxios<null>({
        url: `/accounts/delete/${accountId}`,
        method: 'DELETE',
    })
}

export const getAccountDeleteMutationFetcher = (accountId: string) => {
    return (_: Key, __: { arg: Arguments }): Promise<null> => {
        return accountDelete(accountId)
    }
}
export const getAccountDeleteMutationKey = (accountId: string) =>
    [`/accounts/delete/${accountId}`] as const

export type AccountDeleteMutationResult = NonNullable<
    Awaited<ReturnType<typeof accountDelete>>
>
export type AccountDeleteMutationError = null | string

export const useAccountDelete = <TError = null | string>(
    accountId: string,
    options?: {
        swr?: SWRMutationConfiguration<
            Awaited<ReturnType<typeof accountDelete>>,
            TError,
            Key,
            Arguments,
            Awaited<ReturnType<typeof accountDelete>>
        > & { swrKey?: string }
    }
) => {
    const { swr: swrOptions } = options ?? {}

    const swrKey = swrOptions?.swrKey ?? getAccountDeleteMutationKey(accountId)
    const swrFn = getAccountDeleteMutationFetcher(accountId)

    const query = useSWRMutation(swrKey, swrFn, swrOptions)

    return {
        swrKey,
        ...query,
    }
}
